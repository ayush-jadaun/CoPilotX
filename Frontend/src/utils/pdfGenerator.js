import jsPDF from 'jspdf';
import JSZip from 'jszip';

export const generateAgentPDF = (agent, response, startupIdea) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  // Header
  doc.setFontSize(20);
  doc.setFont(undefined, 'bold');
  doc.text('CoPilotX - AI Startup Co-Founder', margin, 30);
  
  // Agent title
  doc.setFontSize(16);
  doc.setFont(undefined, 'bold');
  const agentColors = {
    CEO: [128, 90, 213],
    CTO: [59, 130, 246], 
    CMO: [34, 197, 94],
    CFO: [245, 158, 11]
  };
  
  const color = agentColors[agent] || [0, 0, 0];
  doc.setTextColor(color[0], color[1], color[2]);
  doc.text(`${agent} Co-Founder Analysis`, margin, 50);
  
  // Reset color
  doc.setTextColor(0, 0, 0);
  
  // Startup idea section
  doc.setFontSize(12);
  doc.setFont(undefined, 'bold');
  doc.text('Startup Idea:', margin, 70);
  
  doc.setFont(undefined, 'normal');
  const ideaLines = doc.splitTextToSize(startupIdea, maxWidth);
  doc.text(ideaLines, margin, 80);
  
  // Response section
  let currentY = 80 + (ideaLines.length * 6) + 15;
  
  doc.setFont(undefined, 'bold');
  doc.text(`${agent} Strategic Analysis:`, margin, currentY);
  currentY += 10;
  
  // Process response text
  doc.setFont(undefined, 'normal');
  doc.setFontSize(10);
  
  // Clean up the response text (remove markdown formatting)
  const cleanResponse = response
    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold markdown
    .replace(/\*(.*?)\*/g, '$1') // Remove italic markdown
    .replace(/#{1,6}\s/g, '') // Remove headers
    .replace(/•/g, '•') // Keep bullet points
    .replace(/📈|📊|🎯|🚀|⚠️|🌟|🏆|🔄|🏗️|📱|🔧|⏱️|🔒|⚡|🔄|📊|🛡️|🎨|📱|🤝|📈|🎯|🚀|📊|🎪|📱|🌱|💰|📊|💵|📈|⚖️|🏦|📊|💡|🎯|💳/g, ''); // Remove emojis
  
  const responseLines = doc.splitTextToSize(cleanResponse, maxWidth);
  
  // Add response text with page breaks
  for (let i = 0; i < responseLines.length; i++) {
    if (currentY > pageHeight - margin) {
      doc.addPage();
      currentY = margin;
    }
    doc.text(responseLines[i], margin, currentY);
    currentY += 5;
  }
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by CoPilotX - Your AI Startup Co-Founder', margin, pageHeight - 10);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth - margin - 60, pageHeight - 10);
  
  return doc;
};

export const generateStrategyPack = async (responses, startupIdea) => {
  const zip = new JSZip();
  const agents = ['CEO', 'CTO', 'CMO', 'CFO'];
  
  // Create individual PDFs for each agent
  agents.forEach(agent => {
    if (responses[agent]) {
      const pdf = generateAgentPDF(agent, responses[agent], startupIdea);
      const pdfBlob = pdf.output('blob');
      zip.file(`${agent}_Strategy_Analysis.pdf`, pdfBlob);
    }
  });
  
  // Create a summary PDF with all responses
  const summaryDoc = new jsPDF();
  const pageWidth = summaryDoc.internal.pageSize.width;
  const pageHeight = summaryDoc.internal.pageSize.height;
  const margin = 20;
  const maxWidth = pageWidth - (margin * 2);
  
  // Summary header
  summaryDoc.setFontSize(18);
  summaryDoc.setFont(undefined, 'bold');
  summaryDoc.text('CoPilotX - Complete Strategy Pack', margin, 30);
  
  summaryDoc.setFontSize(12);
  summaryDoc.setFont(undefined, 'normal');
  summaryDoc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, 45);
  
  // Startup idea
  summaryDoc.setFont(undefined, 'bold');
  summaryDoc.text('Startup Idea:', margin, 65);
  summaryDoc.setFont(undefined, 'normal');
  const ideaLines = summaryDoc.splitTextToSize(startupIdea, maxWidth);
  summaryDoc.text(ideaLines, margin, 75);
  
  let currentY = 75 + (ideaLines.length * 6) + 20;
  
  // Add each agent's summary
  agents.forEach(agent => {
    if (responses[agent]) {
      if (currentY > pageHeight - 60) {
        summaryDoc.addPage();
        currentY = margin;
      }
      
      summaryDoc.setFontSize(14);
      summaryDoc.setFont(undefined, 'bold');
      summaryDoc.text(`${agent} Co-Founder Summary`, margin, currentY);
      currentY += 15;
      
      summaryDoc.setFontSize(10);
      summaryDoc.setFont(undefined, 'normal');
      
      // Get first 200 characters as summary
      const summary = responses[agent].substring(0, 300) + '...';
      const cleanSummary = summary
        .replace(/\*\*(.*?)\*\*/g, '$1')
        .replace(/\*(.*?)\*/g, '$1')
        .replace(/#{1,6}\s/g, '')
        .replace(/📈|📊|🎯|🚀|⚠️|🌟|🏆|🔄|🏗️|📱|🔧|⏱️|🔒|⚡|🔄|📊|🛡️|🎨|📱|🤝|📈|🎯|🚀|📊|🎪|📱|🌱|💰|📊|💵|📈|⚖️|🏦|📊|💡|🎯|💳/g, '');
      
      const summaryLines = summaryDoc.splitTextToSize(cleanSummary, maxWidth);
      summaryDoc.text(summaryLines, margin, currentY);
      currentY += (summaryLines.length * 5) + 15;
    }
  });
  
  // Add footer note
  summaryDoc.setFontSize(8);
  summaryDoc.setTextColor(128, 128, 128);
  summaryDoc.text('For detailed analysis, see individual agent PDFs', margin, pageHeight - 20);
  summaryDoc.text('Generated by CoPilotX - Your AI Startup Co-Founder', margin, pageHeight - 10);
  
  const summaryBlob = summaryDoc.output('blob');
  zip.file('00_Strategy_Pack_Summary.pdf', summaryBlob);
  
  // Create README file
  const readmeContent = `CoPilotX Strategy Pack
=====================

This package contains your complete startup strategy analysis from our AI Co-Founder team.

Contents:
- 00_Strategy_Pack_Summary.pdf: Overview of all recommendations
- CEO_Strategy_Analysis.pdf: Strategic vision and market analysis
- CTO_Strategy_Analysis.pdf: Technical architecture and development plan
- CMO_Strategy_Analysis.pdf: Marketing strategy and brand positioning
- CFO_Strategy_Analysis.pdf: Financial projections and business model

Startup Idea: ${startupIdea}

Generated on: ${new Date().toLocaleDateString()}
Generated by: CoPilotX - Your AI Startup Co-Founder

For more information, visit: https://copilotx.ai
`;
  
  zip.file('README.txt', readmeContent);
  
  // Generate and download zip
  const zipBlob = await zip.generateAsync({ type: 'blob' });
  
  // Create download link
  const url = URL.createObjectURL(zipBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `CoPilotX_Strategy_Pack_${new Date().toISOString().split('T')[0]}.zip`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
  
  return true;
};